import Constants from "../shared/constants";
import Map from "../shared/map";
import Player from "../shared/player";
import { Circle } from "../shared/shape";
import Vector from "../shared/vector";

export class LocalPlayer extends Player {
    inputLog: Input[];
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.id = obj.id; //overwrite the autogenerated id for this entity
        this.inputLog = [];
    }

    applyAndSave(input: Input) {
        super.apply(input);
        this.inputLog.push(input);
    }

    setState(state: SerializedPlayer) {
        this.shape.pos.set(state.pos);
        this.shape.vel.set(state.vel);
        this.inputLog = this.inputLog.filter(i => i.clientTime > state.lastProcessedTime);
        for (var input of this.inputLog) {
            this.apply(input);
        }
    }
}

export class PredictivePlayer extends Player {
    path: State[];
    pathTimer: number;
    pShape: Shape;
    offsetPos: Vector;
    offsetVel: Vector;
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.pShape = new Circle(obj.pos, 1, Constants.PLAYER_SIZE, "cyan", 1);
        this.shape.pos.set(obj.pos);
        this.shape.vel.set(obj.vel);
        this.id = obj.id; //overwrite the autogenerated id for this entity
        this.path = [];
        this.pathTimer = 0;
        this.shape.color = "red";

        this.offsetPos = new Vector(0, 0);
        this.offsetVel = new Vector(0, 0);
    }

    draw(ctx: CanvasRenderingContext2D) {
        this.pShape.draw(ctx);
        super.draw(ctx);
    }

    update(deltaTime: number) {
        if (this.path.length > 0) {
            this.pathTimer += deltaTime;
            while (this.path.length > 0 && this.path[0].deltaTime < this.pathTimer) {
                this.pShape.pos.set(this.path[0].pos);
                this.pShape.vel.set(this.path[0].vel);
                this.pathTimer -= this.path[0].deltaTime;
                this.path.shift();
            }
        }

        this.offsetPos = this.offsetPos.mult(.8);
        this.shape.pos.add(this.offsetPos.mult(.2));
        this.offsetVel = this.offsetVel.mult(.75);
        this.shape.vel.add(this.offsetVel.mult(.33));
        this.shape.pos.add(this.shape.vel.mult(deltaTime / 1000 * Constants.PLAYER_SPEED));
        this.shape.vel.set(this.shape.vel.mult(1 - Constants.FRICTION * deltaTime / 1000));
        this.map.collide(this);
    }

    setState(obj: SerializedPlayer) {
        this.path = this.path.concat(obj.path);

        if (this.path.length > 0) {
            var posAtPathEnd = new Vector(this.path[this.path.length - 1].pos);
            var velAtPathEnd = new Vector(this.path[this.path.length - 1].vel);
            posAtPathEnd.add(this.shape.pos.mult(-1));
            this.offsetPos = posAtPathEnd;
            velAtPathEnd.add(this.shape.vel.mult(-1));
            this.offsetVel = velAtPathEnd;
        }
    }
}