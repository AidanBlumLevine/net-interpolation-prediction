import Map from "../shared/map";
import Player from "../shared/player";

export class LocalPlayer extends Player {
    inputLog: Input[];
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.id = obj.id; //overwrite the autogenerated id for this entity
        this.inputLog = [];
    }

    applyAndSave(input: Input) {
        super.apply(input);
        this.inputLog.push(input);
    }

    setState(state: SerializedPlayer) {
        this.shape.pos.set(state.pos);
        this.shape.vel.set(state.vel);
        this.inputLog = this.inputLog.filter(i => i.clientTime > state.lastProcessedTime);
        for (var input of this.inputLog) {
            this.apply(input);
        }
    }
}

export class PredictivePlayer extends Player {
    path: State[];
    pathTimer: number;
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.shape.pos.set(obj.pos);
        this.shape.vel.set(obj.vel);
        this.id = obj.id; //overwrite the autogenerated id for this entity
        this.path = [];
        this.pathTimer = 0;
        this.shape.color = "red";

    }

    update(deltaTime: number) {
        if (this.path.length > 0) {
            this.pathTimer += deltaTime;
            while (this.path.length > 0 && this.path[0].deltaTime < this.pathTimer) {
                this.shape.pos.set(this.path[0].pos);
                this.shape.vel.set(this.path[0].vel);
                this.pathTimer -= this.path[0].deltaTime;
                this.path.shift();
            }
        }
    }

    setState(obj: SerializedPlayer) {
        this.path = this.path.concat(obj.path);
    }
}