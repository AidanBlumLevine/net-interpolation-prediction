import Constants from "../shared/constants";
import Map from "../shared/map";
import Player from "../shared/player";
import Vector from "../shared/vector";

export class LocalPlayer extends Player {
    stateLog: State[];
    offsetPos: Vector;
    offsetVel: Vector;
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.id = obj.id; //overwrite the autogenerated id for this entity

        this.stateLog = [];
        this.offsetPos = new Vector(0, 0);
        this.offsetVel = new Vector(0, 0);
    }

    applyAndSave(input: Input) {
        this.offsetPos = this.offsetPos.mult(.8);
        this.shape.pos.add(this.offsetPos.mult(.2));
        this.offsetVel = this.offsetVel.mult(.75);
        this.shape.vel.add(this.offsetVel.mult(.33));

        super.apply(input);
        this.stateLog.push({
            pos: this.shape.pos.copy(),
            vel: this.shape.vel.copy(),
            clientTime: input.clientTime
        });
    }

    setState(state: SerializedPlayer) {
        this.stateLog = this.stateLog.filter(i => i.clientTime >= state.lastProcessedTime);
        if (this.stateLog.length > 0) {
            var posAtServerTime = new Vector(this.stateLog[0].pos);
            var velAtServerTime = new Vector(this.stateLog[0].vel);
            posAtServerTime.add(new Vector(state.pos).mult(-1));
            this.offsetPos = posAtServerTime.mult(-1);
            velAtServerTime.add(new Vector(state.vel).mult(-1));
            this.offsetVel = velAtServerTime.mult(-1);
        }
    }
}

export class PredictivePlayer extends Player {
    offsetPos: Vector;
    offsetVel: Vector;
    constructor(obj: SerializedPlayer, map: Map) {
        super(map);
        this.shape.pos.set(obj.pos);
        this.shape.vel.set(obj.vel);
        this.id = obj.id; //overwrite the autogenerated id for this entity
        this.shape.color = "red";

        this.offsetPos = new Vector(0, 0);
        this.offsetVel = new Vector(0, 0);
    }

    draw(ctx: CanvasRenderingContext2D) {
        super.draw(ctx);
    }

    update(deltaTime: number) {
        this.offsetPos = this.offsetPos.mult(.8);
        this.shape.pos.add(this.offsetPos.mult(.2));
        this.offsetVel = this.offsetVel.mult(.75);
        this.shape.vel.add(this.offsetVel.mult(.33));
        this.shape.pos.add(this.shape.vel.mult(deltaTime / 1000 * Constants.PLAYER_SPEED));
        this.shape.vel.set(this.shape.vel.mult(1 - Constants.FRICTION * deltaTime / 1000));
        this.map.collide(this);
    }

    setState(obj: SerializedPlayer) {
        var posAtPathEnd = new Vector(obj.pos);
        var velAtPathEnd = new Vector(obj.vel);
        posAtPathEnd.add(this.shape.pos.mult(-1));
        this.offsetPos = posAtPathEnd;
        velAtPathEnd.add(this.shape.vel.mult(-1));
        this.offsetVel = velAtPathEnd;
    }
}